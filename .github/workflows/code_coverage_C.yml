name: Code Coverage (C)
'on':
  push:
    branches:
      - main
    paths:
      - '**/*.c'
  pull_request:
    branches:
      - main
    paths:
      - '**/*.c'
  workflow_dispatch:
    inputs:
      custom_username:
        description: Enter custom username (default is "default-user")
        required: false
        default: default-user
      project_id:
        description: Enter project ID (default is "default-project")
        required: false
        default: default-project
jobs:
  test:
    name: Run Tests and Generate HTML Coverage Report
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up dependencies
        run: |
          sudo apt update
          sudo apt install -y lcov gcovr gcc
      - name: Set Default Coverage to 0
        run: echo "COVERAGE=0" >> $GITHUB_ENV
      - name: Compile all .c files with coverage flags
        run: |
          SUCCESS=true
          for file in $(find . -maxdepth 1 -name "*.c"); do
            gcc -fprofile-arcs -ftest-coverage -c "$file" || SUCCESS=false
          done
          if [ "$SUCCESS" = true ]; then
            gcc -fprofile-arcs -ftest-coverage -o test_executable *.o
          fi
          echo "SUCCESS=$SUCCESS" >> $GITHUB_ENV
      - name: Run tests (only if compilation succeeded)
        if: env.SUCCESS == 'true'
        run: ./test_executable
      - name: >-
          Generate HTML and Text coverage reports using gcovr (only if
          compilation succeeded)
        if: env.SUCCESS == 'true'
        run: |
          gcovr --html --html-details -o coverage.html
          gcovr > coverage.txt
      - name: Debug Coverage Output (only if compilation succeeded)
        if: env.SUCCESS == 'true'
        run: |
          echo "Contents of coverage.txt:"
          cat coverage.txt
      - name: Extract Coverage Percentage (only if compilation succeeded)
        id: extract-coverage
        if: env.SUCCESS == 'true'
        run: >
          COVERAGE=$(grep -oP 'TOTAL\s+\d+\s+\d+\s+(\d+\.\d+)%' coverage.txt |
          sed -E 's/.* ([0-9.]+)%/\1/')

          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
      - name: Move Coverage Report to docs/
        run: >
          USERNAME="${{ github.event.inputs.custom_username || 'default-user'
          }}"

          PROJECT_ID="${{ github.event.inputs.project_id || 'default-project'
          }}"

          DOCS_FOLDER="docs/$USERNAME/$PROJECT_ID/code_coverage"

          mkdir -p "$DOCS_FOLDER"

          mv coverage.html "$DOCS_FOLDER/coverage.html"
      - name: Upload HTML Coverage Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: c_coverage_html_report
          path: >-
            docs/${{ github.event.inputs.custom_username || 'default-user'
            }}/${{ github.event.inputs.project_id || 'default-project'
            }}/code_coverage/
      - name: Commit and Push Coverage Report to GitHub Pages
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: >
          git config user.name "GitHub Actions"

          git config user.email "actions@github.com"

          git add docs/${{ github.event.inputs.custom_username || 'default-user'
          }}/${{ github.event.inputs.project_id || 'default-project'
          }}/code_coverage/

          git commit -m "Update C coverage report for ${{
          github.event.inputs.custom_username || 'default-user' }}"

          git push https://x-access-token:${GH_PAT}@github.com/${{
          github.repository }} main --force
      - name: Call API to Insert Coverage Score
        run: >
          API_URL="https://seal-app-39wgb.ondigitalocean.app/api/setCoverage?clientpublic=baef7468287a44d8ac3634026d9fb8d1&clientsecret=181a2f3171117c1bd164c88b1171c1b83114fc1712121b12"

          USER_ID="${{ github.event.inputs.custom_username || 'default-user' }}"

          PROJECT_ID="${{ github.event.inputs.project_id || 'default-project'
          }}"

          LAST_REQUEST_TIME="$(date +%s)000"

          newcooverage="98"

          curl -X POST "$API_URL" \
            -H "Content-Type: application/json" \
            -d "{
              \"userid\": \"$USER_ID\",
              \"projectid\": \"$PROJECT_ID\",
              \"recordtime\": \"$LAST_REQUEST_TIME\",
              \"coverage\": \"$newcooverage\"
            }"
      - name: Clean up coverage files
        run: rm -rf *.gcov *.gcda *.gcno *.o test_executable coverage.txt
